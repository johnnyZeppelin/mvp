# File: tools/scaffold.py
# Usage:
#   python tools/scaffold.py --init            # create repo layout from charter
#   python tools/scaffold.py --module user_service --kind service
#   python tools/scaffold.py --tests-only       # (re)generate tests from interfaces
#
# Zero heavy deps: only PyYAML. Keeps templates minimal and composable.

#!/usr/bin/env python3
import argparse
import textwrap
from pathlib import Path
import sys

try:
    import yaml
except ImportError:
    print("Install PyYAML: pip install pyyaml", file=sys.stderr)
    sys.exit(2)

ROOT = Path(__file__).resolve().parents[1]
CHARTER = ROOT / "project.charter.yaml"

MICRO_TEMPLATES = {
    "__init__.py": """# Generated by scaffold.\n""",
    "service_module.py": textwrap.dedent(
        """
        """Service: {name}\n\nAuto-generated stub from Charter. Replace pass with real logic.\n"""
        from dataclasses import dataclass
        from typing import TypedDict

        # Example from Charter datatypes (if present):
        class User(TypedDict):
            id: str
            email: str

        def get_user(user_id: str) -> User:  # signature synced with Charter
            """Fetch a user by ulid. Raises KeyError if not found."""
            raise KeyError(user_id)

        def create_user(email: str) -> User:
            """Create a user (email must be unique)."""
            return {"id": "01HXXXXXXX", "email": email}
        """
    ),
    "unit_test.py": textwrap.dedent(
        """
        import pytest
        # Contract tests generated from Charter interfaces.
        # Adjust and extend as needed.

        def test_create_user_contract():
            from {module} import create_user
            u = create_user("test@example.com")
            assert "id" in u and isinstance(u["id"], str)
            assert "email" in u and u["email"].endswith("@example.com")

        def test_get_user_not_found():
            import pytest
            from {module} import get_user
            with pytest.raises(KeyError):
                get_user("01HDOESNOTEXIST")
        """
    ),
    "property_test.py": textwrap.dedent(
        """
        import pytest
        try:
            from hypothesis import given, strategies as st
        except Exception:  # optional
            pytest.skip("hypothesis not installed")

        @pytest.mark.property
        @pytest.mark.skip(reason="example property; replace with real invariants")
        @given(st.text())
        def test_round_trip_identity(s):
            assert s == s
        """
    ),
}


def load_charter():
    with CHARTER.open("r", encoding="utf-8") as f:
        return yaml.safe_load(f)


def ensure_layout(ch):
    layout = ch.get("meta", {}).get("repo_layout", {})
    src = ROOT / layout.get("src_dir", "src")
    tests = ROOT / layout.get("test_dir", "tests")
    docs = ROOT / layout.get("docs_dir", "docs")
    for d in (src, tests, docs, ROOT/"tools", ROOT/".charter"):
        d.mkdir(parents=True, exist_ok=True)
        init = d / "__init__.py" if d.name in (src.name,) else None
        if init and not init.exists():
            init.write_text(MICRO_TEMPLATES["__init__.py"], encoding="utf-8")
    return src, tests, docs


def find_first_api_module(ch):
    apis = ch.get("interfaces", {}).get("apis", {})
    for api_name, cfg in apis.items():
        module = cfg.get("module")
        if module:
            return api_name, module
    return None, None


def write_service_stub(src_dir: Path, module_path: str, name: str):
    py_path = (src_dir / Path(module_path.replace(".", "/") + ".py")).resolve()
    py_path.parent.mkdir(parents=True, exist_ok=True)
    if not py_path.exists():
        py_path.write_text(MICRO_TEMPLATES["service_module.py"].format(name=name), encoding="utf-8")
        print(f"[scaffold] wrote {py_path.relative_to(ROOT)}")
    else:
        print(f"[scaffold] exists {py_path.relative_to(ROOT)}")


def write_tests(test_dir: Path, module_path: str):
    unit = test_dir / f"test_{module_path.split('.')[-1]}_unit.py"
    unit.write_text(MICRO_TEMPLATES["unit_test.py"].format(module=module_path), encoding="utf-8")
    print(f"[scaffold] wrote {unit.relative_to(ROOT)}")
    prop = test_dir / f"test_{module_path.split('.')[-1]}_property.py"
    prop.write_text(MICRO_TEMPLATES["property_test.py"], encoding="utf-8")
    print(f"[scaffold] wrote {prop.relative_to(ROOT)}")


def cmd_init():
    ch = load_charter()
    src, tests, _ = ensure_layout(ch)
    api_name, module = find_first_api_module(ch)
    if module:
        write_service_stub(src, module, api_name)
        write_tests(tests, module)
    else:
        print("[scaffold] No interfaces.apis.* found in Charter. Created layout only.")


def cmd_module(kind: str, name: str):
    ch = load_charter()
    src, tests, _ = ensure_layout(ch)
    module = f"{ch['meta']['name'].lower().replace('-', '_')}.{kind}s.{name}"
    write_service_stub(src, module, name)
    write_tests(tests, module)


def cmd_tests_only():
    ch = load_charter()
    _, tests, _ = ensure_layout(ch)
    apis = ch.get("interfaces", {}).get("apis", {})
    for api_name, cfg in apis.items():
        module = cfg.get("module")
        if module:
            write_tests(tests, module)


def main():
    p = argparse.ArgumentParser()
    p.add_argument("--init", action="store_true")
    p.add_argument("--tests-only", action="store_true")
    p.add_argument("--module", type=str, help="module short name (e.g., user_service)")
    p.add_argument("--kind", type=str, default="service", help="service|util|adapter|pipeline")
    args = p.parse_args()

    if args.init:
        cmd_init()
    elif args.tests_only:
        cmd_tests_only()
    elif args.module:
        cmd_module(args.kind, args.module)
    else:
        print("Usage: --init | --tests-only | --module NAME [--kind K]")

if __name__ == "__main__":
    main()

